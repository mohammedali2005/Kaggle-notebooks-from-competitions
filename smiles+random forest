{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":90087,"databundleVersionId":11467685,"sourceType":"competition"}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dataaddict71/smiles-random-forest?scriptVersionId=236229194\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-25T15:54:42.150521Z","iopub.execute_input":"2025-04-25T15:54:42.150684Z","iopub.status.idle":"2025-04-25T15:54:43.84636Z","shell.execute_reply.started":"2025-04-25T15:54:42.150668Z","shell.execute_reply":"2025-04-25T15:54:43.845727Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install rdkit","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-25T16:00:38.17297Z","iopub.execute_input":"2025-04-25T16:00:38.173535Z","iopub.status.idle":"2025-04-25T16:00:43.864699Z","shell.execute_reply.started":"2025-04-25T16:00:38.173506Z","shell.execute_reply":"2025-04-25T16:00:43.863972Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom rdkit import Chem\nfrom rdkit.Chem import Descriptors, AllChem\nfrom sklearn.linear_model import RidgeCV, LassoCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import LeaveOneOut, cross_val_predict\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_squared_log_error","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 1. Load data and handle leakage\ntrain = pd.read_csv('/kaggle/input/molecular-machine-learning/train.csv')\ntest = pd.read_csv('/kaggle/input/molecular-machine-learning/test.csv')\nleaked_ids = ['Train-41', 'Train-42']\n\ndef smiles_features(smiles):\n    mol = Chem.MolFromSmiles(smiles)\n    if mol is None:\n        # Return NaN for all features if the molecule is invalid\n        return pd.Series([np.nan]*36, index=['MolWt', 'NumAromaticRings', 'TPSA'] + [f'MorganFP_{i}' for i in range(32)])\n    \n    # Extract molecular features\n    mw = Descriptors.MolWt(mol)\n    # Count the number of aromatic rings\n    aromatic_rings = sum(1 for ring in Chem.GetSymmSSSR(mol) if all(mol.GetAtomWithIdx(idx).GetIsAromatic() for idx in ring))\n    tpsa = Descriptors.TPSA(mol)\n    \n    # Convert Morgan fingerprint to a list of integers\n    fp = AllChem.GetMorganFingerprintAsBitVect(mol, 2, nBits=32)\n    fp_arr = list(fp)  # Convert RDKit bit vector to a plain Python list\n    \n    # Return all features as a flat list\n    return pd.Series([mw, aromatic_rings, tpsa] + fp_arr, index=['MolWt', 'NumAromaticRings', 'TPSA'] + [f'MorganFP_{i}' for i in range(32)])\nfor df in [train, test]:\n    feats = df['Smiles'].apply(smiles_features)\n    df[feats.columns] = feats","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 3. Feature selection: keep domain features and select more with Lasso\npriority_features = [\n    'TDOS4.0', 'NumHeteroatoms', 'Mass', 'HOMO', 'LUMO', 'PrimeExcite(eV)',\n    'MolWt', 'NumAromaticRings', 'TPSA'\n] + [f'MorganFP_{i}' for i in range(32)]\n\ndrop_cols = ['Batch_ID', 'T80', 'Smiles']\nX_full = train.drop(columns=drop_cols)\ny_full = train['T80']\nX_test = test.drop(columns=['Batch_ID', 'Smiles'])\nX_test = X_test[X_full.columns]\n\nimputer = SimpleImputer(strategy='mean')\nscaler = StandardScaler()\nX_full = pd.DataFrame(imputer.fit_transform(X_full), columns=X_full.columns)\nX_test = pd.DataFrame(imputer.transform(X_test), columns=X_test.columns)\nX_full = pd.DataFrame(scaler.fit_transform(X_full), columns=X_full.columns)\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X_test.columns)\n\nlasso = LassoCV(cv=5, random_state=42, max_iter=10000)\nlasso.fit(X_full, np.log1p(y_full))\nsupport = (np.abs(lasso.coef_) > 1e-5)\nselected = list(X_full.columns[support])\nfor f in priority_features:\n    if f not in selected and f in X_full.columns:\n        selected.append(f)\nX_sel = X_full[selected]\nX_test_sel = X_test[selected]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 4. Honest validation with LOOCV (excluding leaked samples)\nnon_leaked_idx = ~train['Batch_ID'].isin(leaked_ids)\nX_cv = X_sel[non_leaked_idx]\ny_cv = y_full[non_leaked_idx]\nalphas = np.logspace(-3, 3, 50)\nridge = RidgeCV(alphas=alphas, cv=5)\nloo = LeaveOneOut()\ny_pred_cv = cross_val_predict(ridge, X_cv, np.log1p(y_cv), cv=loo)\ncv_msle = mean_squared_log_error(y_cv, np.expm1(y_pred_cv))\nprint(f\"LOOCV MSLE (excluding leaked): {cv_msle:.5f}\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 5. Model training and ensembling\nrf = RandomForestRegressor(n_estimators=200, max_depth=5, random_state=42)\nrf.fit(X_cv, np.log1p(y_cv))\nridge.fit(X_cv, np.log1p(y_cv))\n\nridge_preds = np.expm1(ridge.predict(X_test_sel))\nrf_preds = np.expm1(rf.predict(X_test_sel))\nfinal_preds = 0.6 * ridge_preds + 0.4 * rf_preds","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 6. Submission\nsubmission = pd.DataFrame({\n    'Batch_ID': test['Batch_ID'],\n    'T80': final_preds\n})\nsubmission.to_csv('submission.csv', index=False)\n\n# 7. Feature importances\nprint(\"Ridge coefficients:\")\nfor f, coef in zip(selected, ridge.coef_):\n    print(f\"{f}: {coef:.4f}\")\n\nimportances = pd.Series(rf.feature_importances_, index=selected)\nprint(\"\\nRandom Forest importances:\")\nprint(importances.sort_values(ascending=False).head(10))","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}